### File: public/script2.js\nconst mainHeader = document.getElementById('mainHeader');

async function reverseGeocode(lat, lng) {
    const API_KEY = 'AIzaSyDJlvljO' + '-' + 'CVH5ax4paudEnj9RoERL6Xhbc';
    const endpoint = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${API_KEY}`;
  
    try {
      const response = await fetch(endpoint);
      const data = await response.json();
      if (data.status === "OK") {
        // Return the formatted address
        //return data.results[0].formatted_address;  //////////////////////////////
        return data.results[0];
      } else {
        console.error("Geocoding error:", data.status);
        return null;
      }
    } catch (error) {
      console.error("Failed to reverse geocode:", error);
      return null;
    }
  }

document.getElementById('searchForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const userInputText = document.getElementById('addressInput').value;
    const resultDiv = document.getElementById('result');
    const initialContent = document.getElementById('initialContent');
    const tryAgainButton = document.getElementById('tryAgainButton');
    const loadingDiv = document.querySelector('.loading');

    // hide the initial content
    mainHeader.style.display = 'none';
    initialContent.style.display = 'none';
    // Show the loading indicator
    loadingDiv.style.display = 'block';
    // Reset the result div opacity to 0 to achieve the fade-in effect on new data
    resultDiv.style.opacity = 0;

    // Send input address to endpoint /analyze_address
    try {
        //console.log("Sending address to endpoint analyze_address...");
        const response = await fetch('https://sb102bot-gh.vercel.app/api/analyze_address', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                address: userInputText
            }),
        });

        // Await response from sb102bot server
        const data = await response.json();
        //console.log("Response from /analyze_address: \n", data);
        
        // Extract the data from the response
        const { address, city, county, density, walkscore, latitude, longitude } = data;
        //  .****.
        //  | ^--+-- WILL THIS BREAK IF IT IS NOT PERFECTLY MAPPED OUT TO THE ENDPOINT'S RESPONSE??
        //  '****'
        
        //   .--------------------------------------,
        //   |  Reverse-geocode on client side     /    (THIS IS BAD FORM! It should be done serverside!)
        //   '------------------------------------'

        // "Clean" the user input address by reverse-geocoding the already-geocoded address (this should really be done server-side) 
        const inputLocationClean = await reverseGeocode(latitude, longitude);
        const inputAddressClean = inputLocationClean.formatted_address;        
        //console.log("Cleaned address: ", inputAddressClean);

        // Print all values in address_components
        console.log("Address components: ", inputLocationClean.address_components);

        // Use the cleaned Location object to get the details we need
        const inputStreetNumber = inputLocationClean.address_components.find(c => c.types[0] ==='street_number')?.short_name
        const inputStreetName = inputLocationClean.address_components.find(c => c.types[0] === 'route')?.short_name
        const inputCity = inputLocationClean.address_components.find(c => c.types[0] === 'locality')?.short_name
        const inputCounty = inputLocationClean.address_components.find(c => c.types[0] === 'administrative_area_level_2')?.short_name
        const inputState = inputLocationClean.address_components.find(c => c.types[0] === 'administrative_area_level_1')?.short_name
        const inputZip = inputLocationClean.address_components.find(c => c.types[0] === 'postal_code')?.short_name
        // Compose the Location's complete "address" as I want it to be shown (i.e, No city, state, zip, or country)
        const inputAddressConstructed = `${inputStreetNumber ? inputStreetNumber + ' ' : ''}${inputStreetName ? inputStreetName + ', ': ''}${inputCity ? inputCity + '': ''}`;
        console.log("Constructed address:", inputAddressConstructed); // from custom reconstruction

        //   .--------------------------------------,
        //   |    Prepare assets for response      /
        //   '------------------------------------'

        // Google Maps redirect URL:
        const googleMapsURLInput = `https://www.google.com/maps?q=${latitude},${longitude}`;
        // Street View image URL:
        const streetViewURLInput = `https://maps.googleapis.com/maps/api/streetview?size=600x300&location=${latitude},${longitude}&key=AIzaSyCm_XobfqV7s6bQJm0asuqZawWAYkXHN0Q`;        
        // Satellite image URL:
        const satelliteURLInput = `https://maps.googleapis.com/maps/api/staticmap?center=${latitude},${longitude}&zoom=18&size=600x300&maptype=satellite&key=AIzaSyCm_XobfqV7s6bQJm0asuqZawWAYkXHN0Q`;

        //   .--------------------------------------,
        //   |  Construct the complete response    /
        //   '------------------------------------'

        // STREET VIEW & GOOGLE MAPS LINK:
        let resultContent = `
            <div class="fade-in-line"><u><b><h3>${inputAddressConstructed}</h3></b></u></div>

            <div class="imageContainer">
                <div class="imageItem">
                    <div class="fade-in-line"><a href="${googleMapsURLInput}" target="_blank"><img src="${satelliteURLInput}" alt="Google Satellite View of Your Input Address"></a></div>
                    <div class="fade-in-line">See <a href="${googleMapsURLInput}" target="_blank">property</a> in Google Maps<br><br></div>
                </div>
                <div class="imageItem">
                    <div class="fade-in-line"><a href="${googleMapsURLInput}" target="_blank"><img src="${streetViewURLInput}" alt="Google Street View of Your Input Address"></a></div>
                    <div class="fade-in-line">See <a href="${googleMapsURLInput}" target="_blank">property</a> in Google Maps<br><br></div>
                </div>
            </div>
        `;
        
        // MAXIMUM MUNICIPAL DENSITY LOOKUP:
        if (!density || density <= 0) {
            resultContent += `
                <div class="fade-in-line"><br>Unfortunately, I don't know ${inputCity !== '-' ? inputCity : inputCounty}'s maximum residential density.<br>This info is necessary for coming up with a unit count.</div>
                <div class="fade-in-line">Cheer up, though, because I've just added your property to the list of cities and counties to someday add. Check back next week?<br></div>
            `;
        } else {
            resultContent += `
                <div class="fade-in-line"><br>The maximum allowed residential density anywhere in ${inputCity !== '-' ? inputCity : inputCounty} is ${density} units/acre, so a Live Local-qualifying development here could match that.<br><br><br></div>
            `;
        }
        
        //   .------------------------------------,
        //   |    Display the full response      /
        //   '----------------------------------'

        // Set the content of the result div to our fully-generated content
        resultDiv.innerHTML = resultContent;
        resultDiv.style.opacity = '1';

        // Fade the response in line-by-line
        let delayPerLine = 500 // milliseconds
        let delay = 0;
        const fadeInLines = document.querySelectorAll('.fade-in-line');
        fadeInLines.forEach(line => {
            setTimeout(() => {
                line.style.opacity = '1';
            }, delay);
            delay += delayPerLine;
        });
        // Hide loading indicator
        loadingDiv.style.display = 'none';
        // Show "Try Again" button
        tryAgainButton.style.display = 'block';

    } catch (error) {
        console.log("Error while sending/receiving data: ", error);
        resultDiv.innerHTML = "<u>Sorry, an error occurred.</u><br>Try again later. <br><br><h2>:'-(</h2>";
        loadingDiv.innerHTML = "<u>Sorry, an error occurred.</u><br>Try again later. <br><br><h2>:'-(</h2>";
    }
});


// Handle 'Try Again' button click
document.getElementById('tryAgainButton').addEventListener('click', function() {
    const resultDiv = document.getElementById('result');
    const initialContent = document.getElementById('initialContent');
    const tryAgainButton = document.getElementById('tryAgainButton');
    const mainHeader = document.getElementById('mainHeader');
    // Hide results and "Try Again" button
    resultDiv.style.opacity = '0';
    tryAgainButton.style.display = 'none';
    // Show the initial content and the main header
    initialContent.style.display = 'block';
    mainHeader.style.display = 'block';
    // Scroll to the top of the page
    window.scrollTo(0, 0);
});


// Fade in the input box upon page load (adds a class to the input after the page loads to trigger the transition)
window.addEventListener('load', () => {
     // slight delay (100 ms) to ensure styles are applied after load
     setTimeout(() => {
        const input = document.getElementById('addressInput');
        input.style.opacity = 1;
        input.style.transform = 'translateY(0)';
    }, 100);
});\n--------------------------------------------------\n### File: public/index.html\n<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="apple-touch-icon" sizes="180x180" href="/imgs/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/imgs/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/imgs/favicon/favicon-16x16.png">
    <link rel="manifest" href="/misc/site.webmanifest">
    <title>Live Local Calculator</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
    <div id="menuBar">
        <a href="https://cresunshine.com">  x</a>
        <div id="sunIcon"></div>
        <a href="https://cresunshine.com">o  </a>
    </div>
    <br><br>
    <h1 id="mainHeader">
        What does the <b>Live Local Act</b> let you do?
    </h1>
    <div id="initialContent">
        <p>
            <br>Enter an address to find out.
        </p>
        <form id="searchForm">
            <input type="text" id="addressInput" placeholder="420 Calle Ocho, Miami, FL">
            <br><br>
            <button type="submit">Underwrite</button>
        </form>
        <p>
            <br>Discover a site's potential in 30 seconds.
            <br>It might be a lot more than you thought!
        </p>
        <p>
            <br><br><br>
            Last updated Sept. 21, 2023
            <br>Created by <a href="https://twitter.com/oyoops" target="_blank"><u>@oyoops</u></a> | <a href="https://cresunshine.com/" target="_blank"><u>CRE☀️</u></a>
        </p>
    </div>
    <div id="result">
        <div class="imageContainer">
            <div id="inputAddressImage" class="imageItem"></div>
            <div id="tallestBuildingImage" class="imageItem"></div>
        </div>
    </div>
    <div class="loading">Conducting due diligence</div>
    <footer>
    </footer>
    <button id="tryAgainButton" style="display: none;">
        <b>Search for another property</b>
    </button>
    <script src="script2.js"></script>
    <!-- <script src="addressAnalysis.js"></script> -->
    <!-- <script src="additionalContent.js"></script> -->
</body>
</html>\n--------------------------------------------------\n### File: api/analyze_address.py\nfrom main import *
from constants import *
from density import get_density, density_data
from location import Location
from http.server import BaseHTTPRequestHandler
import json

import psycopg2
import os

###  This endpoint accepts client POST requests to https://sb102bot/api/analyze_address
###  which executes ________?________ function using address input.

class handler(BaseHTTPRequestHandler):
    def send_cors_headers(self):
        """Set headers for Cross-Origin Resource Sharing (CORS)"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')

    def do_OPTIONS(self):
        """Respond to an OPTIONS request."""
        self.send_response(204)
        self.send_cors_headers()
        self.end_headers()
    
    def do_GET(self):
        # Handle the GET request here, maybe return a basic message or form
        self.send_response(200)
        self.send_cors_headers()
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(str("Send a POST request with an address to analyze an address.").encode())

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)

        # Convert the incoming bytes to a UTF-8 string
        input_data_str = post_data.decode("utf-8")

        # Convert the JSON-formatted string to a Python dictionary
        input_data = json.loads(input_data_str)

        # Now you can use .get() because input_data is a dictionary
        userInputAddress = input_data.get('address', '')
        print(f"User input address: {userInputAddress}")

        # Geocode, and then reverse-geocode, the input address
        subjectLocation = get_address_analysis(userInputAddress)
        # Extract just the Location object from the resulting dictionary
        subjectLoc = subjectLocation.get('location', None)

        # Get city and county
        if subjectLoc:
            city, county = subjectLoc.get_city_and_county()
        else:
            city, county = None, None

        # Max. municipal densities table lookup
        if city:
            municipality = city
            density_value = get_density(municipality)
            print("Highest density in", municipality, "is", density_value, "units/ac.")
        elif county:
            municipality = county
            density_value = get_density(municipality)
            print("Highest density in", municipality, "is", density_value, "units/ac.")
        else:
            municipality = "Unknown"
            # no data for this municipality
            density_value = 0
            print("No density data available for this municipality.")        
        
        # Print max. municipal density results
        print("City:", city)
        print("County:", county)
        print("Municipality:", municipality)
        print("Density:", density_value, "units/ac.")
        

        #####################################################################################################


        ## RESPONSE:

        # Set headers
        self.send_response(200)
        self.send_cors_headers()
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        # Compose the response
        response = {
            "address": subjectLocation.get("address", None),
            "city": subjectLocation.get("city", None),
            "county": subjectLocation.get("county", None),
            "density": subjectLocation.get("density", None),
            "walkscore": subjectLocation.get("walkscore", None),
            "latitude": subjectLocation.get("latitude", None),
            "longitude": subjectLocation.get("longitude", None)
        }

        print("Debugging: response object:")
        print(response)

        # Send the response to client
        self.wfile.write(json.dumps(response).encode())


# --------------


# CLEAN and DETAIL location (geocodes and reverse geocodes user input)
def get_address_analysis(userInputAddress):

    # Initialize the input as a Location object 
    loc = Location(userInputAddress)
        # ^ Will this fail if the address is not found / bad input? If so, would it cause the whole web app to stop functioning?
    
    # Get details of the location
    lat, lon = loc.geocode_address()
    city, county = loc.get_city_and_county()
    walkability_score = loc.get_walkability_score()
    max_density = get_density(city) if city else get_density(county)
    
    # Log results
    print(f"\n ,----------------.---------------------------.")
    print(f" |   RESULTS       /  Live Local Act Analysis |")
    print(f"  >---------------+---------------------------|\n")    
    print(f" |   SUBJECT:     |", userInputAddress,"\n")
    print(f"  >---------------+---------------------------|\n")    
    print(f" |   Lat/Long     | {round(lat, 5)}, {round(lon, 5)}")
    print(f"  >---------------+---------------------------|\n")    
    print(f" |   City         | {city if city else 'Unknown'}\n")
    print(f" |   County       | {county if county else 'Unknown'}")
    print(f" |   Max. Density | {max_density} units/ac.")
    print(f"  >---------------+---------------------------|\n")    
    print(f" |   Walkability  | {walkability_score}")
    print(f" '----------------^---------------------------'\n")
    
    ##### ATTEMPT POSTGRESQL CONNECTION
    conn = connect_to_database()
    if conn:
        print("Connected to the PostgreSQL database  :-)")
        conn.close()
    else:
        print("FAILED to connect to the PostgreSQL database  :'-(")
    #####

    # Compose result dictionary
    result = {
        "address": userInputAddress,
        "city": city,
        "county": county,
        "density": max_density,
        "walkscore": walkability_score,
        "latitude": lat,
        "longitude": lon,
        "location": loc
    }
    # Return result dictionary
    return result


# Connect to the PostGRESQL database
def connect_to_database():
    conn = None
    try:
        conn = psycopg2.connect(
            host="45.82.75.6",
            port="5432",
            dbname="sb102bot_db",
            user="postgres",
            password=DB_PASSWORD
        )
        print("Connected to the database!")
    except Exception as e:
        print("Unable to connect to the database.")
        print(e)
    return conn
\n--------------------------------------------------\n### File: main.py\nfrom location import Location
from building import Building
from density import get_density
from constants import FEET_IN_STORY, DEFAULT_RADIUS_IN_MILES, METERS_IN_MILE

# "Main" function of the /building_height endpoint
# (trying to deprecate now)
def get_building_height_from_input(input_data):
    # Get location object
    loc = Location(input_data)
    lat, lon = get_location_coordinates(input_data, loc)
    city, county = loc.get_city_and_county()

    # Get building object
    building_obj = Building(lat, lon)

    print(f"\n--------------------------------------------------------------------------------------\n\nSEARCHING...")
    print(f"\nSUBJECT PROPERTY:")
    print(f"Lat/Long: {round(lat, 5)}, {round(lon, 5)}")
    print(f"City: {city if city else 'Unknown'}, County: {county if county else 'Unknown'}\n")

    # Get top buildings
    top_buildings = get_top_buildings(building_obj)
    print_top_buildings(top_buildings, building_obj)

    # Get approx. stories
    tallest_building_details = get_tallest_building_details(top_buildings, building_obj)
    approx_stories = int(tallest_building_details['height'] / FEET_IN_STORY)
    print(f"Approx. stories: {approx_stories}")

    # Get walkability score
    walkability_score = loc.get_walkability_score()
    print(f"\nWalkability Score: {walkability_score}")

    # Get max density in municipality
    max_density = get_density(city) if city else get_density(county)
    
    # Log results
    print(f"\n .--------------------------------------------------------------------------------.")
    print(f" |  Live Local Act allows for a building height of up to {round(approx_stories * FEET_IN_STORY,0)} feet (~{approx_stories} stories)   |")
    print(f" '--------------------------------------------------------------------------------'\n\n")
    
    # Collect results
    result = {
        "height": tallest_building_details.get('height', 'Unknown'),
        "address": tallest_building_details.get('address', 'Unknown'),
        "latitude": tallest_building_details.get('latitude', 'Unknown'),
        "longitude": tallest_building_details.get('longitude', 'Unknown'),
        "city": city,
        "county": county,
        "density": max_density,
        "distance": tallest_building_details.get('distance', 'Unknown'),
        "building_name": tallest_building_details.get('name', 'Unknown'),
        "location": loc
    }

    # Return results dictionary
    response = {"result": result}
    return response


# ---


# Determine if user input is in lat,lng format or an address and geocode if necessary
def get_location_coordinates(input_data, loc_obj):
    try:
        lat, lon = map(float, input_data.split(','))
        print(f"Input Lat/Long: {round(lat, 5)}, {round(lon, 5)}")
    except ValueError:
        lat, lon = loc_obj.geocode_address()
        print(f"Geocoded Lat/Long: {round(lat, 5)}, {round(lon, 5)}")
    return lat, lon

# Function to get top buildings
def get_top_buildings(building_obj):
    buildings = building_obj.get_building_heights()
    return sorted(buildings, key=lambda x: float(x['height']), reverse=True)[:3]

# Function to print top buildings
def print_top_buildings(top_buildings, building_obj):
    for idx, building in enumerate(top_buildings):
        building_details = building_obj.get_detailed_building_info(building)
        print(f"\n  #{idx + 1}  Name:        {building_details['name']}")
        print(f"      Height:      {building_details['height']} feet")
        print(f"      Address:     {building_details['address']}")
        print(f"      Lat, Long:   {building_details['latitude']}, {building_details['longitude']}")
        print(f"      Distance:    {building_details['distance']} mi.")

# Function to get tallest building details
def get_tallest_building_details(buildings, building_obj):
    tallest_building = max(buildings, key=lambda x: float(x['height']))
    tallest_building_info = building_obj.get_building_info(tallest_building['id'], tallest_building['type'])
    tallest_bldg_name = tallest_building_info.get('Tags', {}).get('name', "Unknown")
    tallest_bldg_address = f"{tallest_building_info.get('Tags', {}).get('addr:housenumber', '-')}, {tallest_building_info.get('Tags', {}).get('addr:street', '')}"
    tallest_geometry = building_obj.fetch_geometry(tallest_building['id'], tallest_building['type'])
    tallest_building_lat, tallest_building_lon = tallest_geometry[0] if tallest_geometry and len(tallest_geometry) > 0 else (None, None)
    distance = Location.haversine_distance(building_obj.latitude, building_obj.longitude, tallest_building_lat, tallest_building_lon) if tallest_building_lat is not None and tallest_building_lon is not None else None
    distance = round(distance, 2) if distance else None
    
    return {
        "height": int(round(float(tallest_building['height']))),
        "address": tallest_bldg_address,
        "latitude": tallest_building_lat,
        "longitude": tallest_building_lon,
        "distance": distance,
        "building_name": tallest_bldg_name
    }


# ---


# Main script
def main(input_data):

    # Get location object
    loc = Location(input_data)
    lat, lon = get_location_coordinates(input_data, loc)
    city, county = loc.get_city_and_county()

    # Get building object
    building_obj = Building(lat, lon)

    print(f"\n--------------------------------------------------------------------------------------\n\nSEARCHING...")
    print(f"\nSUBJECT PROPERTY:")
    print(f"Lat/Long: {round(lat, 5)}, {round(lon, 5)}")
    print(f"City: {city if city else 'Unknown'}, County: {county if county else 'Unknown'}\n")

    # Get top buildings
    top_buildings = get_top_buildings(building_obj)
    print_top_buildings(top_buildings, building_obj)

    # Get approx. stories
    tallest_building_details = get_tallest_building_details(top_buildings, building_obj)
    approx_stories = int(tallest_building_details['height'] / FEET_IN_STORY)
    print(f"Approx. stories: {approx_stories}")

    # Get walkability score
    walkability_score = loc.get_walkability_score()
    print(f"\nWalkability Score: {walkability_score}")

    # Get max density in municipality
    max_density = get_density(city) if city else get_density(county)
    
    # Log results
    print(f"\n .--------------------------------------------------------------------------------.")
    print(f" |  Live Local Act allows for a building height of up to {round(approx_stories * FEET_IN_STORY,0)} feet (~{approx_stories} stories)   |")
    print(f" '--------------------------------------------------------------------------------'\n\n")
    
    # Return results
    return {
        "height": tallest_building_details.get('height', 'Unknown'),
        "address": tallest_building_details.get('address', 'Unknown'),
        "latitude": tallest_building_details.get('latitude', 'Unknown'),
        "longitude": tallest_building_details.get('longitude', 'Unknown'),
        "city": city,
        "county": county,
        "density": max_density,
        "distance": tallest_building_details.get('distance', 'Unknown'),
        "building_name": tallest_building_details.get('name', 'Unknown'),
        "location": loc
    }


# Script entry point
if __name__ == '__main__':
    main()
\n--------------------------------------------------\n